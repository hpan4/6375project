//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.18 at 12:36:17 PM EST 
//


package Calculator.Calculator;

import java.sql.DriverManager;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import java.sql.*;

/**
 * <p>Java class for job complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * <complexType name="job">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="jobID" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         <element name="question" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         <element name="answer" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "job", propOrder = {
    "jobID",
    "question",
    "answer"
})
/**
 * Class Job stores and calculates 2nd greatest divisor of an integer.
 * @author Huilin Pan
 *
 */
public class Job {

    protected int jobID;
    protected int question;
    protected int answer;

    /**
     * Gets the value of the jobID property.
     * 
     */
    public int getJobID() {
        return jobID;
    }

    /**
     * Sets the value of the jobID property.
     * 
     */
    public void setJobID(int value) {
        this.jobID = value;
    }

    /**
     * Gets the value of the question property.
     * 
     */
    public int getQuestion() {
        return question;
    }

    /**
     * Sets the value of the question property.
     * 
     */
    public void setQuestion(int value) {
        this.question = value;
    }

    /**
     * Gets the value of the answer property.
     * 
     */
    public int getAnswer() {
        return answer;
    }

    /**
     * Sets the value of the answer property.
     * 
     */
    public void setAnswer(int value) {
        this.answer = value;
    }
    
    /**
     * Calculate result to answer
     */
    public void calculate(){
    	answer=0;
	    try {
	      //calculate 2nd greatest divisor/factor
	      if (question!=0){
	    	  for (int i=1; i<=question/2; i++){
	    		  if (question%i==0)
	    			  answer=i;
	    	  } //end for loop
	      } //end if
	    } catch (Exception e) {
	      System.err.println(e.getClass().getName()+": "+e.getMessage());
	      System.exit(0);
	    }
    } //end calculate()

	/**
	 * Takes an integer job ID as input, 
	 * and returns the actual output data.
	 */
	public static int query(int jobID) {
		double result=0;
		Connection c = null;
	    Statement stmt = null;
	    try {
	      Class.forName("org.sqlite.JDBC");
	      c = DriverManager.getConnection("jdbc:sqlite:JobList.db");
	      c.setAutoCommit(false);
	      System.out.println("Opened database successfully");

	      stmt = c.createStatement();
	      ResultSet rs = stmt.executeQuery("SELECT * FROM JOBLIST where ID="+jobID+";");
	      
          result = rs.getDouble("pvalue");
          System.out.println( "ID = " + jobID );
          System.out.println( "PVALUE = " + result );
          System.out.println();
	      
	      rs.close();
	      stmt.close();
	      c.close();
	    } catch ( Exception e ) {
	      System.err.println( e.getClass().getName() + ": " + e.getMessage() );
	      System.exit(0);
	    }
	    System.out.println("Operation done successfully");
		return result;
	} //end query()

	/**
	 * takes the same input but return an integer job ID 
	 * immediately without blocking for the computation to finish. 
	 * (This is where you would need data persistence.)
	 */
	public static int submit(double pvalue) {
		jobIDCount++;
		int jobID = jobIDCount;
		//int pvalue=execute(myInput);
		//insert record
	    Connection c = null;
	    Statement stmt = null;
	    try {
	      Class.forName("org.sqlite.JDBC");
	      c = DriverManager.getConnection("jdbc:sqlite:JobList.db");
	      c.setAutoCommit(false);
	      stmt = c.createStatement();
	      String sql = "INSERT INTO JOBLIST (ID, PVALUE) " +
	                   "VALUES ("+ jobID + ", "+pvalue+");"; 
	      stmt.executeUpdate(sql);
	      stmt.close();
	      c.commit();
	      c.close();
	    } catch ( Exception e ) {
	      System.err.println( e.getClass().getName() + ": " + e.getMessage() );
	      System.exit(0);
	    }
		return jobID;
	}
	
	
}
